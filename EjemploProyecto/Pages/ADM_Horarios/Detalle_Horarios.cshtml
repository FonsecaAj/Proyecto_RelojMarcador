@page
@model EjemploProyecto.Pages.ADM_Horarios.Detalle_HorariosModel
@{
    ViewData["Title"] = "Administración de Horarios";
}

<h1>Horarios del usuario</h1>

<!-- mensajes de éxito/error -->
@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        @TempData["SuccessMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        @TempData["ErrorMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

<p>
    <a class="btn btn-primary" asp-page="Create_Horario" asp-route-id="@Model.IdentificacionUsuario">
        Nuevo
    </a>
    <a class="btn btn-outline-secondary" asp-page="/ADM_Usuarios/Index">
        Regresar al listado
    </a>
</p>

<form id="__af" method="post" style="display:none">
    @Html.AntiForgeryToken()
    
    <!-- Campo hidden para mantener la identificación -->
    <input type="hidden" name="IdentificacionUsuario" value="@Model.IdentificacionUsuario" />
</form>

<!-- Contenedor dinámico para la lista de horarios -->
<div id="contenedorHorarios">
    @await Html.PartialAsync("_HorariosLista", Model)
</div>

<!-- Contenedor dinámico para formulario + tabla -->
<div id="contenedorDetalles">
    @if (Model.MostrarFormulario)
    {
        @await Html.PartialAsync("_FormularioDetalle", Model)
        @await Html.PartialAsync("_TablaDetalles", Model)
    }
</div>

<!-- Modales globales -->
@await Html.PartialAsync("_ModalesGenerales")

<!-- Modal de Confirmación para Eliminar -->
<div class="modal fade" id="confirmDeleteModal" tabindex="-1" aria-labelledby="confirmDeleteLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content border-danger">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title" id="confirmDeleteLabel">
                    <i class="bi bi-exclamation-triangle-fill"></i> Confirmar eliminación
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Cerrar"></button>
            </div>
            <div class="modal-body text-center">
                ¿Realmente desea eliminar el elemento seleccionado?
            </div>
            <div class="modal-footer justify-content-center">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">No</button>
                <button id="btnConfirmDelete" type="button" class="btn btn-danger">Sí</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Variables globales para eliminar
        let idAEliminar = null;
        let tipoEliminacion = ''; // 'horario' o 'detalle'

        // Obtener token antiforgery
        function getToken() {
            return document.querySelector('input[name="__RequestVerificationToken"]')?.value || '';
        }

        // Configurar el modal de confirmación una sola vez
        document.addEventListener('DOMContentLoaded', function() {
            document.querySelector("#btnConfirmDelete").addEventListener("click", async function () {
                const modal = bootstrap.Modal.getInstance(document.getElementById("confirmDeleteModal"));
                modal.hide();

                if (idAEliminar) {
                    if (tipoEliminacion === 'horario') {
                        await eliminarHorario(idAEliminar);
                    } else if (tipoEliminacion === 'detalle') {
                        await eliminarDetalle(idAEliminar);
                    }
                    idAEliminar = null;
                    tipoEliminacion = '';
                }
            });
        });

        // Mostrar modal si viene desde el servidor
        function mostrarModalDesdeServidor(html) {
            document.getElementById('contenedorDetalles').innerHTML = html;
            const modalMsg = document.getElementById('messageModal');
            if (modalMsg) {
                const modal = new bootstrap.Modal(modalMsg);
                modal.show();
            }
        }

        // --- Seleccionar horario ---
        async function seleccionarHorario(idHorario) {
            const data = new FormData();
            data.append('id', idHorario);
            data.append('__RequestVerificationToken', getToken());

            const res = await fetch('?handler=Seleccionar', {
                method: 'POST',
                body: data,
                credentials: 'same-origin'
            });

            const html = await res.text();
            document.getElementById('contenedorDetalles').innerHTML = html;
        }

        // --- Agregar detalle ---
        async function agregarDetalle() {
            const form = document.getElementById('formAgregarDetalle');
            const data = new FormData(form);
            data.append('__RequestVerificationToken', getToken());

            const res = await fetch('?handler=AgregarDetalle', {
                method: 'POST',
                body: data,
                credentials: 'same-origin'
            });

            const html = await res.text();
            mostrarModalDesdeServidor(html);
        }

        // --- Eliminar detalle ---
        async function eliminarDetalle(id) {
            const data = new FormData();
            data.append('idDetalle', id);
            const horarioId = document.querySelector('input[name="HorarioSeleccionadoId"]')?.value || '0';
            data.append('HorarioSeleccionadoId', horarioId);
            data.append('__RequestVerificationToken', getToken());

            const res = await fetch('?handler=EliminarDetalle', {
                method: 'POST',
                body: data,
                credentials: 'same-origin'
            });

            const html = await res.text();
            mostrarModalDesdeServidor(html);
        }

                // --- Eliminar horario ---
                async function eliminarHorario(id_Horario) {
            const data = new FormData();
            data.append('id_Horario', id_Horario);
            data.append('__RequestVerificationToken', getToken());

            // Enviar la identificación del usuario
            const identificacionUsuario = document.querySelector('input[name="IdentificacionUsuario"]')?.value;
            if (identificacionUsuario) {
                data.append('IdentificacionUsuario', identificacionUsuario);
            }

            try {
                const res = await fetch('?handler=EliminarHorario', {
                    method: 'POST',
                    body: data,
                    credentials: 'same-origin'
                });

                const html = await res.text();

                // lista de horarios
                document.getElementById('contenedorHorarios').innerHTML = html;

                // panel de detalles
                document.getElementById('contenedorDetalles').innerHTML = '';

                // Buscar y mostrar el modal dentro del HTML actualizado
                const modalElement = document.getElementById('messageModal');
                if (modalElement) {
                    const modal = new bootstrap.Modal(modalElement);
                    modal.show();
                }

            } catch (error) {
                
               
                alert('Error al eliminar el horario: ' + error.message);
            }
        }

        // --- Funciones de confirmación ---
        function confirmarEliminarHorario(id) {
            idAEliminar = id;
            tipoEliminacion = 'horario';
            const modal = new bootstrap.Modal(document.getElementById("confirmDeleteModal"));
            modal.show();
        }

        function confirmarEliminar(idDetalle) {
            idAEliminar = idDetalle;
            tipoEliminacion = 'detalle';
            const modal = new bootstrap.Modal(document.getElementById("confirmDeleteModal"));
            modal.show();
        }
    </script>
}